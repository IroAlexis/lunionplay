#!/usr/bin/env bash

if [ "$DEBUG" = 1 ]; then
  set -x
fi

where="$(dirname "$(which "${BASH_SOURCE[0]}")")"

if [[ "$1" =~ -h ]] || [[ "$1" =~ --help ]]; then
  echo "usage: $0 gamename [/path/to/setup.exe]"
  exit 0
fi

if [ $# -eq 0 ] || [ $# -gt 2 ]; then
  echo "usage: $0 gamename [/path/to/setup.exe]"
  exit 1
fi


msg()
{
  echo -e "  \033[1;34m->\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

dialog()
{
  echo -en "\033[1;34m::\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

warning()
{
  echo -e "\033[1;33m==> WARNING:\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

error()
{
  echo -e "\033[1;31m==> ERROR:\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

wine_wait()
{
  msg "Waiting all wine processes terminate..."
  wineserver --wait
}

create_gamestart()
{
  flag=1
  msg

  if [[ "$_icond" =~ [yY] ]]; then
    find "$GAME_DIR/gamedata" -name "*.exe" -exec echo "  -> " "{}" \;
  else
    find "$GAME_DIR/pfx/drive_c" -name "*.exe" -exec echo "  -> " "{}" \; | grep -ve "drive_c/windows" -e "/wordpad.exe" -e "/wmplayer.exe" -e "/iexplore.exe"
  fi

  msg
  while [ "$flag" -eq 1 ]; do
    dialog "Fill in game exe's path (press Enter if you don't want 'gamestart' file):"
    read -rp " " exep;
    if [ -f "$exep" ]; then
      echo "$exep" > "$GAME_DIR/gamestart"
      flag=0
    elif [ -z $exep ]; then
      flag=0
    else
      error "Path don't valid"
    fi
  done

  return 0
}

innoextract_process()
{
  cd "$GAME_DIR/gamedata" || exit

  msg "Installating in progress..."
  innoextract "$1" -sgm --progress=1 --collisions rename

  # Move the content for success to launch some games (Frostpunk)
  cp -rl app/* .

  # "Hack" for SW Republic Commando and may be some others games
  if [ -d "__support/app" ]; then
    cp -rl __support/app/* .
  fi

  rm -rf __redist/
  rm -rf __support/
  rm -rf app/
  rm -rf commonappdata/
  rm -rf tmp/
}



# ==============
#  Verification
# ==============

command -v source 1> /dev/null
if ! [ $? ]; then
  msg "Need install the tcl package"
  exit 1
fi

if [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "$HOME/.config/lunion-play/customization.cfg" ]; then
  source "$HOME"/.config/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: $HOME/.config/lunion-play/customization.cfg"
elif [[ "$where" != ^/+usr/+bin/*.* ]] && [ -f "$where/customization.cfg" ]; then
  source "$where"/customization.cfg 2> /dev/null
  msg "cfg: $where/customization.cfg"
elif [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "/etc/lunion-play/customization.cfg" ]; then
  source /etc/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: /etc/lunion-play/customization.cfg"
else
  warning "customization.cfg not found"
  if [ -z "$GAMES_PATH" ]; then
    error "Use the variable 'GAMES_PATH=/home/frog'"
  fi

  if [ -z "$CUSTOM_WINE" ]; then
    command -v wine 1> /dev/null
    if [ $? ]; then
      warning "Using the Wine system (or use the variable 'CUSTOM_WINE=/path/to/wine/bin')"
    else
      error "Use the variable 'CUSTOM_WINE=/path/to/wine/bin'"
      error "Or need install wine (mainline/staging)"

      if [ -z "$GAMES_PATH" ]; then
        exit 1
      fi
    fi
  fi
fi

if [[ "$1" =~ ^/|(/[a-zA-Z_0-9-]+)+|/+$ ]]; then
  error "You don't must not be a path ($1)"
  exit 1
fi

if [ -n "$2" ] && ! [ -f "$2" ]; then
  error "$2 don't exist"
  exit 1
fi

if [ -n "$2" ] && [[ "$(basename $2)" =~ ^patch ]] && [ -d "$GAME_DIR/gamedata" ]; then
  error "Game patch are not supported with game installation outside wine prefix"
  exit 1
fi


# ============================
#  Games folder Configuration
# ============================

if [ -n "$GAMES_PATH" ] && [ -d "$GAMES_PATH" ]; then
  GAME_DIR="$(realpath "$GAMES_PATH")/$1"
elif [ -n "$_games_path" ] && [ -d "$_games_path" ]; then
  GAME_DIR="$(realpath "$_games_path")/$1"
else
  exit 1
fi

dialog "Do you want install the game in $GAME_DIR ?"
read -rp " [Y/n] " _CONDITION;
if [[ "$_CONDITION" =~ [nN] ]]; then
  msg "Please set '_games_path' as you want in the .cfg file"
  msg "or use the variable 'GAMES_PATH'"
  exit 1
fi
if ! [ -d "$GAME_DIR" ]; then
  mkdir -p "$GAME_DIR"
fi

if ! [ -d "$GAME_DIR/shaderscache" ]; then
  dialog "Do you want a shader cache folder ($GAME_DIR/shaderscache) ?"
  read -rp " [Y/n] " _CONDITION;
  if ! [[ "$_CONDITION" =~ [nN] ]]; then
    mkdir -p "$GAME_DIR/shaderscache"
  fi
fi


# ====================
#  Wine Configuration
# ====================

if [ -z "$WINE_CUSTOM" ] && [ -n "$_wine_custom" ]; then
  WINE_CUSTOM="$_wine_custom"
fi
if [ -n "$WINE_CUSTOM" ]; then
  if [ -z "$PATH" ]; then
    export PATH="$WINE_CUSTOM/bin"
  else
    export PATH="$WINE_CUSTOM/bin:$PATH"
  fi

  if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH="$WINE_CUSTOM/lib64:$WINE_CUSTOM/lib32:$WINE_CUSTOM/lib"
  else
    export LD_LIBRARY_PATH="$WINE_CUSTOM/lib64:$WINE_CUSTOM/lib32:$WINE_CUSTOM/lib:$LD_LIBRARY_PATH"
  fi
fi

echo "[+] info:: lunion-play: $(wine --version)"
dialog "Proceed with this Wine version ?"
read -rp " [Y/n] " _CONDITION;
if [[ "$_CONDITION" =~ [nN] ]]; then
  exit 1
fi


# ==========================
#  Wine prefix Installation
# ==========================

export WINEPREFIX="$GAME_DIR/pfx"
export WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="

dialog "Do you want use 32 bits prefix ?"
read -rp " [y/N] " _CONDITION;
if [[ "$_CONDITION" =~ [yY] ]]; then
  export WINEARCH=win32
fi
dialog "Do you want the debug Wine ?"
read -rp " [y/N] " _CONDITION;
if ! [[ "$_CONDITION" =~ [yY] ]]; then
  export WINEDEBUG=-all
fi

msg "Running wine prefix initialization..."
wineboot
ret=$?

wine_wait
if ! [ "$ret" ]; then
  error "Problem with wine prefix..."
  exit 1
fi


if [ "$LUNION_PLAY_DAMAVAND" = 1 ]; then
  wine reg add 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer /d vulkan /f 1> /dev/null
  msg "Damavand will be used"
else
  if wine reg query 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer &> /dev/null; then
    wine reg delete 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer /f &> /dev/null
  fi
  unset LUNION_PLAY_DAMAVAND
fi


# ===================
#  Game Installation
# ===================

if [ "$2" ]; then
  if [[ "$(basename $2)" =~ ^patch ]]; then
    wine "$2"
    wine_wait

    msg "exit script done"
    exit 0
  fi

  dialog "Is it a GOG installer ?"
  read -rp " [y/N] " _CONDITION;
  if [[ "$_CONDITION" =~ [yY] ]]; then
    dialog "Do you want install the game outside wine prefix (no game updates support) ?"
    read -rp " [y/N] " _icond;
    if [[ "$_icond" =~ [yY] ]]; then
      if command -v innoextract 1> /dev/null; then
        mkdir -p "$GAME_DIR/gamedata"
        innoextract_process "$2"
      else
        error "innoextract is not install"
        exit 1
      fi
      create_gamestart

      msg "exit script done"
      exit 0
    fi

    msg "$(winepath -u C:\\GOG\ Games)"
  fi

  warning "Don't launch the game with the installer..."
  wine "$2"
  wine_wait
fi

create_gamestart

msg "exit script done"
exit 0
