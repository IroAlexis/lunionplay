#!/usr/bin/env bash

if [ "$DEBUG" = 1 ]; then
  set -x
fi

where="$(dirname "$(which "${BASH_SOURCE[0]}")")"

if [[ "$1" =~ -h ]] || [[ "$1" =~ --help ]]; then
  echo "usage: $0 gamename [/path/to/setup.exe]"
  exit 0
fi

if [ $# -eq 0 ] || [ $# -gt 2 ]; then
  echo "usage: $0 gamename [/path/to/setup.exe]"
  exit 1
fi


msg()
{
  echo -e "  \033[1;34m->\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

dialog()
{
  echo -en "\033[1;34m::\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

warning()
{
  echo -e "\033[1;33m==> WARNING:\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

error()
{
  echo -e "\033[1;31m==> ERROR:\033[1;0m\033[1;1m $1\033[1;0m" >&2
}

wine_wait()
{
  msg "Waiting all wine processes terminate..."
  wineserver --wait
}

create_gamestart()
{
  flag=1

  while [ "$flag" -eq 1 ]; do
    dialog "Enter the exe's path (press enter if you want to skip it):"
    read -rp " " exep;
    if [ -f "$exep" ]; then
      echo "$exep" > "$GAMEDIR/gamestart"
      flag=0
    elif [ -z $exep ]; then
      flag=0
    else
      error "Path don't valid"
    fi
  done

  return 0
}



# ==============
#  Verification
# ==============

command -v source 1> /dev/null
if [ ! $? ]; then
  msg "Need install the tcl package"
  exit 1
fi

if [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "$HOME/.config/lunion-play/customization.cfg" ]; then
  source "$HOME"/.config/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: $HOME/.config/lunion-play/customization.cfg"
elif [[ "$where" != ^/+usr/+bin/*.* ]] && [ -f "$where/customization.cfg" ]; then
  source "$where"/customization.cfg 2> /dev/null
  msg "cfg: $where/customization.cfg"
elif [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "/etc/lunion-play/customization.cfg" ]; then
  source /etc/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: /etc/lunion-play/customization.cfg"
else
  warning "customization.cfg not found"
  if [ -z "$GAMES_PATH" ]; then
    error "Use the variable 'GAMES_PATH=/home/frog'"
  fi

  if [ -z "$CUSTOM_WINE" ]; then
    command -v wine 1> /dev/null
    if [ $? ]; then
      warning "Using the Wine system (or use the variable 'CUSTOM_WINE=/path/to/wine/bin')"
    else
      error "Use the variable 'CUSTOM_WINE=/path/to/wine/bin'"
      error "Or need install wine (mainline/staging)"

      if [ -z "$GAMES_PATH" ]; then
        exit 1
      fi
    fi
  fi
fi

if [[ "$1" =~ ^/|(/[a-zA-Z_0-9-]+)+|/+$ ]]; then
  error "You don't must not be a path ($1)"
  exit 1
fi


# ============================
#  Games folder Configuration
# ============================

if [ -n "$GAMES_PATH" ] && [ -d "$GAMES_PATH" ]; then
  GAMEDIR="$(realpath "$GAMES_PATH")/$1"
elif [ -n "$_games_path" ] && [ -d "$_games_path" ]; then
  GAMEDIR="$(realpath "$_games_path")/$1"
else
  exit 1
fi

dialog "Do you want install the game in $GAMEDIR ?"
read -rp " [Y/n] " _CONDITION;
if [[ "$_CONDITION" =~ [nN] ]]; then
  msg "Please set '_games_path' as you want in the .cfg file"
  msg "or use the variable 'GAMES_PATH'"
  exit 1
fi
if [ ! -d "$GAMEDIR" ]; then
  mkdir -p "$GAMEDIR"
fi


# ====================
#  Wine Configuration
# ====================

if [ -z "$CUSTOM_WINE" ] && [ -n "$_custom_wine" ]; then
  CUSTOM_WINE="$_custom_wine"
fi
if [ -n "$CUSTOM_WINE" ]; then
  if [ -z "$PATH" ]; then
    export PATH="$CUSTOM_WINE"
  else
    export PATH="$CUSTOM_WINE:$PATH"
  fi

  if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib"
  else
    export LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib:$LD_LIBRARY_PATH"
  fi
fi

echo "[+] info:: lunion-play: $(wine --version)"
dialog "Proceed with this Wine version ?"
read -rp " [Y/n] " _CONDITION;
if [[ "$_CONDITION" =~ [nN] ]]; then
  exit 1
fi


# ==========================
#  Wine prefix Installation
# ==========================

GAME="$_games_path/$1"

export WINEPREFIX="$GAME"/pfx
export WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="

dialog "Do you want use 32 bits prefix ?"
read -rp " [y/N] " _CONDITION;
if [[ "$_CONDITION" =~ [yY] ]]; then
  export WINEARCH=win32
fi
dialog "Do you want the debug Wine ?"
read -rp " [Y/n] " _CONDITION;
if [[ "$_CONDITION" =~ [nN] ]]; then
  export WINEDEBUG=-all
fi

msg "Running wine prefix initialization..."
wineboot

wine_wait
rslt=$?


# ================================
#  Translation layer Installation
# ================================

if [ -z "$_dxvk_path" ]; then
  warning "DXVK Installation skipped"
fi

if [ -z "$_vkd3dproton_path" ]; then
  warning "VKD3D-Proton Installation skipped"
fi

if [ "$rslt" ]; then
  mkdir -p "$GAME"/shaderscache

  if [ "$LUNION_PLAY_DAMAVAND" = 1 ]; then
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer /d vulkan /f 1> /dev/null
    msg "Damavand will be used"
  else
    wine reg query 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer &> /dev/null
    if [ "$?" ]; then
      wine reg delete 'HKEY_CURRENT_USER\Software\Wine\Direct3D' /v renderer /f &> /dev/null
    fi
    unset LUNION_PLAY_DAMAVAND
  fi

  if [ -n "$_dxvk_path" ] && [ ! "$LUNION_PLAY_DAMAVAND" = 1 ]; then
    dialog "Do you want install DXVK for Direct3D 9/10/11 ?"
    read -rp " [y/N] " _CONDITION;
    if [[ "$_CONDITION" =~ [yY] ]]; then
      "$_dxvk_path"/setup_dxvk.sh install
      wine_wait
    fi
  fi

  if [ -n "$_vkd3dproton_path" ] && [ ! "$LUNION_PLAY_DAMAVAND" = 1 ]; then
    dialog "Do you want install VKD3D Proton for Direct3D 12 ?"
    read -rp " [y/N] " _CONDITION;
    if [[ "$_CONDITION" =~ [yY] ]]; then
      "$_vkd3dproton_path"/setup_vkd3d_proton.sh install
      wine_wait
    fi
  fi


  # ===================
  #  Game Installation
  # ===================

  if [ "$2" ]; then
    if [ ! -f "$2" ]; then
      error "$2 don't exist"
      exit 1
    fi

    dialog "Is it a GOG installer ?"
    read -rp " [y/N] " _CONDITION;
    if [[ "$_CONDITION" =~ [yY] ]]; then

      dialog "Do install the game outside the wine prefix (require innoextract) ?"
      read -rp " [y/N] " _CONDITION;
      if [[ "$_CONDITION" =~ [yY] ]]; then
        command -v innoextract 1> /dev/null
        if [ "$?" ]; then
          mkdir -p "$GAME"/gamedata
          cd "$GAME"/gamedata || exit
          msg "Installating in progress..."
          innoextract "$2" -sgm --progress=1 --collisions rename
          cp -r app/* .
          rm -rf app/
        else
          error "innoextract is not install"
          exit 1
        fi
        create_gamestart

        msg "exit script done"
        exit 0
      fi

      dialog "Do you want the GUI ?"
      read -rp " [Y/n] " _CONDITION;
      if [[ "$_CONDITION" =~ [nN] ]]; then
        _ARGS="/SP- /SUPPRESSMSGBOXES"

        dialog "Do you want a silent installation without progress bar ?"
        read -rp " [y/N] " _CONDITION;
        if [[ "$_CONDITION" =~ [yY] ]]; then
          _ARGS="$_ARGS /VERYSILENT"
        else
          _ARGS="$_ARGS /SILENT"
        fi
        msg "$(winepath -u C:\\GOG\ Games)"
      fi
    fi


    if [ -n "$_ARGS" ]; then
      wine "$2" "$_ARGS"
      wine_wait
    else
      warning "Don't launch the game with the installer..."
      wine "$2"
      wine_wait
    fi
  fi

  create_gamestart

  msg "exit script done"
  exit 0
fi

exit 1
