#!/usr/bin/env bash

if [ "$DEBUG" = 1 ]; then
  set -x
fi

bin="$(basename "${BASH_SOURCE[0]}")"
version="0.2"
where="$(dirname "$(which "${BASH_SOURCE[0]}")")"

case "$1" in
  -h | --help)
    echo "usage: $bin gamename [/path/to/game.exe]"
    exit 0;;
  -v | --version)
    echo "$bin-$version"
    exit 0;;
esac

if [ "$#" -gt 2 ]; then
  echo "usage: $bin gamename [/path/to/game.exe]"
  exit 1
fi


msg()
{
  echo -e "[+] info:: $bin: $1" >&2
}

error()
{
  echo -e "[-] err:: $bin: $1" >&2
}

warn()
{
  echo -e "[-] warn:: $bin: $1" >&2
}

is_futex2_supported()
{
  if [ -d /sys/kernel/futex2 ]; then
    if [ -f /sys/kernel/futex2/wait ] && [ -f /sys/kernel/futex2/waitv ] && [ -f /sys/kernel/futex2/wake ]; then
      msg "kernel: futex2 is supported"
      return 0
    fi
  fi

  msg "kernel: futex2 is not supported"
  return 1
}

is_winesync_supported()
{
  if [ -e /dev/winesync ]; then
    msg "kernel: fastsync is supported"
    return 0
  fi

  msg "kernel: fastsync is not supported"
  return 1
}

update_winepfx()
{
  if [ -z "$WINEDLLOVERRIDES" ]; then
    export WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
  else
    OLD=$WINEDLLOVERRIDES
    WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
  fi

  msg "Preparing to launch the game..."
  $wineboot &> /dev/null
  rslt=$?
  wineserver -w

  WINEDLLOVERRIDES="$OLD"
  unset OLD

  return $rslt
}

display_runtime_options()
{
  if [ -n "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" -gt 0 ]] ; then
    echo "==========================================="
    msg "version: $($wine --version)"
    msg "command: $GAME_EXE"
  fi

  type="runtime_option:"
  msg "$type PATH=$PATH"
  msg "$type LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

  ENV_WINE=$(env | grep -e "WINE\|DXVK\|VKD3D")
  for var in $ENV_WINE; do
    msg "$type $var"
  done

  if [ -n "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" -gt 0 ]] ; then
    echo "==========================================="
  fi
}

# See setup_dxvk.sh in DXVK projet
add_override()
{
  $wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v $1 /d native /f >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    error "reg: Failed to add override for $1"
    exit 1
  fi
}

remove_override()
{
  $wine reg query 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v $1 &> /dev/null
  if [ "$?" ]; then
    $wine reg delete 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v $1 /f > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      warn "reg: Failed to remove override for $1"
    fi
  fi
}

install_file()
{
  dstfile="$1/$3.dll"
  srcfile="$2/$3.dll"

  if ! [ -f "$srcfile" ]; then
    warn "$srcfile: File not found. Skipping." >&2
    return 1
  fi

  if [ -n "$1" ]; then
    if [ -f "$dstfile" ] || [ -h "$dstfile" ]; then
      if ! [ -f "$dstfile.old" ]; then
        mv "$dstfile" "$dstfile.old"
      fi
    else
      touch "$dstfile.old_none"
    fi
    cp -u "$srcfile" "$dstfile"
  fi
  return 0
}

uninstall_file()
{
  dstfile="$1/$2.dll"

  if ! [ -f "$dstfile" ] && ! [ -h "$dstfile" ]; then
    echo "$dstfile: File not found. Skipping." >&2
    return 1
  fi

  if [ -f "$dstfile.old" ]; then
    rm "$dstfile"
    mv "$dstfile.old" "$dstfile"
    return 0
  elif [ -f "$dstfile.old_none" ]; then
    rm "$dstfile.old_none"
    rm "$dstfile"
    return 0
  else
    return 1
  fi
}

install_dxvk()
{
  for dll in dxgi d3d9 d3d10core d3d11; do
    install_file "$win64_pfx_path" "$1/x64" "$dll"
    if $wow64; then
      install_file "$win32_pfx_path" "$1/x32" "$dll"
    fi
    add_override "$dll"
  done
}

uninstall_dxvk()
{
  for dll in dxgi d3d9 d3d10core d3d10 d3d10_1 d3d11; do
    for path in "$win64_pfx_path" "$win32_pfx_path"; do
      if [ -d "$path" ]; then
        uninstall_file "$path" "$dll"
      fi
    done
    remove_override "$dll"
  done
}

install_vkd3dproton()
{
  install_file "$win64_pfx_path" "$1/x64" d3d12
  if $wow64; then
    install_file "$win32_pfx_path" "$1/x86" d3d12
  fi
  add_override d3d12
}

uninstall_vkd3dproton()
{
  for path in "$win64_pfx_path" "$win32_pfx_path"; do
    if [ -d "$path" ]; then
      uninstall_file "$path" d3d12
    fi
  done
  remove_override d3d12
}


# ========================================
#  Lunion Play configuration Verification
# ========================================

command -v source 1> /dev/null
if ! [ $? ]; then
  msg "Need install the 'tcl' package"
  exit 1
fi

if [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "$HOME/.config/lunion-play/customization.cfg" ]; then
  source "$HOME"/.config/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: $HOME/.config/lunion-play/customization.cfg"
elif [[ "$where" != ^/+usr/+bin/*.* ]] && [ -f "$where/customization.cfg" ]; then
  source "$where"/customization.cfg 2> /dev/null
  msg "cfg: $where/customization.cfg"
elif [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -f "/etc/lunion-play/customization.cfg" ]; then
  source /etc/lunion-play/customization.cfg 2> /dev/null
  msg "cfg: /etc/lunion-play/customization.cfg"
else
  msg "cfg: No such 'customization.cfg' file"
  if [ -z "$GAMES_PATH" ]; then
    msg "Use the variable 'GAMES_PATH=/home/frog'"
  fi

  if [ -z "$WINE_CUSTOM" ]; then
    command -v wine 1> /dev/null
    if [ $? ]; then
      msg "Using the Wine system (or use the variable 'WINE_CUSTOM=/path/to/wine/bin')"
    else
      msg "Use the variable 'WINE_CUSTOM=/path/to/wine/bin'"
      msg "Or need install wine (mainline/staging)"

      if [ -z "$GAMES_PATH" ]; then
        exit 1
      fi
    fi
  fi
fi


# =========================
#  Pre-launch Verification
# =========================

if [[ "$1" =~ ^/|(/[a-zA-Z_0-9-]+)+|/+$ ]]; then
  error "Do not pass a path: '$1'"
  exit 1
fi

# First argument allows to find the game directory to be launched
if [ -n "$GAMES_PATH" ] && [ -d "$GAMES_PATH/$1" ]; then
  GAME_DIR="$(realpath "$GAMES_PATH")/$1"
elif [ -n "$_games_path" ] && [ -d "$_games_path/$1" ]; then
  GAME_DIR="$(realpath "$_games_path")/$1"
else
  error "No such game directory"
  exit 1
fi

# Second argument allows to launch the game executable (optionnal)
if [ -n "$2" ] && [ -f "$2" ]; then
  GAME_EXE="$2"
elif [ -f "$GAME_DIR/gamestart" ] && [ -f "$(cat "$GAME_DIR/gamestart")" ]; then
  GAME_EXE="$(cat "$GAME_DIR/gamestart")"
else
  if ! [ -f "$GAME_DIR/gamestart" ]; then
    error "No such 'gamestart' file "
  fi
  error "Indicate a correct executable path $GAME_EXE"
  exit 1
fi

msg "command: $GAME_EXE"


# =======================
#  Runtime Configuration
# =======================

if [ "$WINE_SYSTEM" != 1 ]; then
  if [ -n "$WINE_CUSTOM" ] && [ -d "$WINE_CUSTOM" ]; then
    WINE="$WINE_CUSTOM"
  elif [ -n "$_wine_custom" ] && [ -d "$_wine_custom" ]; then
    WINE="$_wine_custom"
  fi

  if [ -n "$WINE" ]; then
    if [ -z "$PATH" ]; then
      PATH="$WINE/bin"
    else
      PATH="$WINE/bin:$PATH"
    fi
    if [ -z "$LD_LIBRARY_PATH" ]; then
      LD_LIBRARY_PATH="$WINE/lib64:$WINE/lib32:$WINE/lib"
    else
      LD_LIBRARY_PATH="$WINE/lib64:$WINE/lib32:$WINE/lib:$LD_LIBRARY_PATH"
    fi
  fi
fi

# See setup_dxvk.sh in DXVK projet
wine="wine"
wine64="wine64"
wineboot="wineboot"

wine_path=$(dirname "$(command -v $wineboot)")
wow64=true

if ! [ -f "$wine_path/$wine" ]; then
  wine=$wine64
  wow64=false
fi

msg "version: $($wine --version)"

# Don't override WINEPREFIX if the user passed one, otherwise we set ours
if [ -z "$WINEPREFIX" ]; then
  export WINEPREFIX="$GAME_DIR"/pfx
fi

msg "pfx: $WINEPREFIX"
if ! [ -d "$WINEPREFIX" ]; then
  warn "pfx: Need to recreate prefix"
fi

is_futex2_supported
is_winesync_supported

if [ -z "$_no_confirm" ] || [[ "$_no_confirm" =~ false ]]; then
  read -p "Press enter to continue. "
fi

if [ -z "$LUNION_PLAY_SYNC" ]; then
  export WINEESYNC=1
  export WINEFSYNC=1
else
  case "$LUNION_PLAY_SYNC" in
    esync)
      export WINEESYNC=1
      ;;

    fsync)
      export WINEFSYNC_FUTEX2=0
      export WINEFSYNC=1
      ;;

    futex2)
      export WINEFSYNC=1
      ;;

    fastsync)
      unset WINEESYNC
      unset WINEFSYNC
      ;;

    none)
      unset WINEESYNC
      unset WINEFSYNC
      export WINE_DISABLE_FAST_SYNC=1
      msg "wineserver will be used"
      ;;

    *)
      error "LUNION_PLAY_SYNC=$LUNION_PLAY_SYNC is a unknown value"
      exit 1
      ;;
  esac
fi

if [ "$LUNION_PLAY_LOG" = 0 ]; then
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=fixme-all
  fi
elif [ "$LUNION_PLAY_LOG" = 1 ]; then
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=warn+seh
  fi
elif [ "$LUNION_PLAY_LOG" = 2 ]; then
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=+timestamp,+pid,+tid,+seh,+debugstr,+loaddll,+mscoree
  fi
else
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=-all
  fi
fi


# ====================
#  Wine prefix Update
# ====================

update_winepfx

if [ "$?" = 1 ]; then
  error "Problem with prefix update"
  exit 1
fi

if [ -z "$WINEDLLOVERRIDES" ]; then
  export WINEDLLOVERRIDES="winemenubuilder.exe="
else
  export WINEDLLOVERRIDES="$WINEDLLOVERRIDES;winemenubuilder.exe="
fi


if [ -f "$wine_path/$wine64" ] && [ -f "$wine_path/$wine" ]; then
  win64_pfx_path="$WINEPREFIX/drive_c/windows/system32"
  win32_pfx_path="$WINEPREFIX/drive_c/windows/syswow64"
elif [ -f "$wine_path/$wine64" ] && ! [ -f "$wine_path/$wine" ]; then
  win64_pfx_path="$WINEPREFIX/drive_c/windows/system32"
elif ! [ -f "$wine_path/$wine64" ] && [ -f "$wine_path/$wine" ]; then
  win32_pfx_path="$WINEPREFIX/drive_c/windows/system32"
else
  error "Check your Wine build $WINE."
  exit 1
fi

if [ -z "$win32_pfx_path" ] && [ -z "$win64_pfx_path" ]; then
  error "Failed to resolve C:\windows\system32."
  exit 1
fi

if ! [ "$LUNION_PLAY_USE_WINED3D" = 1 ]; then
  # ====================
  #  DXVK Configuration
  # ====================

  # Verify dxvk folder is present
  system_dxvk="/usr/share/lunion-play/dxvk"
  local_dxvk="$where/dxvk"

  if [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -d "$system_dxvk/x64" ] && [ -d "$system_dxvk/x64" ] && [ -f "$system_dxvk/setup_dxvk.sh" ]; then
    install_dxvk "$system_dxvk"
  elif [[ "$where" != ^/+usr/+bin/*.* ]] && [ -d "$local_dxvk/x64" ] && [ -d "$local_dxvk/x32" ] && [ -f "$local_dxvk/setup_dxvk.sh" ]; then
    install_dxvk "$local_dxvk"
  fi

  mkdir -p "$GAME_DIR"/shaderscache/dxvk_state_cache
  export DXVK_STATE_CACHE_PATH="$GAME_DIR"/shaderscache/dxvk_state_cache

  if [[ "$LUNION_PLAY_LOG" -gt 0 ]] && [ -z "$DXVK_LOG_LEVEL" ]; then
    export DXVK_LOG_LEVEL=info
  else
    export DXVK_LOG_LEVEL=none
  fi


  # ============================
  #  VKD3D-Proton Configuration
  # ============================

  # Verify vkd3d-proton folder is present
  system_vkd3dproton="/usr/share/lunion-play/vkd3d-proton"
  local_vkd3dproton="$where/vkd3d-proton"

  if [[ "$where" =~ ^/+usr/+bin/*.* ]] && [ -d "$sys_vkd3dproton/x64" ] && [ -d "$sys_vkd3dproton/x64" ] && [ -f "$sys_vkd3dproton/setup_vkd3d_proton.sh" ]; then
    install_vkd3dproton "$sys_vkd3dproton"
  elif [[ "$where" != ^/+usr/+bin/*.* ]] && [ -d "$local_vkd3dproton/x64" ] && [ -d "$local_vkd3dproton/x86" ] && [ -f "$local_vkd3dproton/setup_vkd3d_proton.sh" ]; then
    install_vkd3dproton "$local_vkd3dproton"
  fi

  if [[ "$LUNION_PLAY_LOG" -gt 0 ]] && [ -z "$VKD3D_DEBUG" ]; then
    export VKD3D_DEBUG=warn
  else
    export VKD3D_DEBUG=none
  fi

  if [ -n "$_ray_tracing" ] && [[ "$_ray_tracing" =~ true ]]; then
    if [ -z "$VKD3D_CONFIG" ]; then
      export VKD3D_CONFIG=dxr
    else
      VKD3D_CONFIG+=,dxr
    fi
  fi
else
  uninstall_dxvk
  uninstall_vkd3dproton
fi


# ======================
#  Driver Configuration
# ======================

export "$(grep -e nvidia /sys/class/drm/card0/device/uevent)"
if [[ "$DRIVER" = nvidia ]] && [ -d /proc/driver/nvidia ]; then
  export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
  export __GL_SHADER_DISK_CACHE=1
  mkdir -p "$GAME_DIR"/shaderscache/nvidia
  export __GL_SHADER_DISK_CACHE_PATH="$GAME_DIR"/shaderscache/nvidia
fi


# =============
#  Game Launch
# =============

cd "$(dirname "$(realpath "$GAME_EXE")")" || exit

if [ -n "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" -gt 0 ]] ; then
  log=$HOME/lunionplay-$1.log
  display_runtime_options &> "$log"
fi
msg "Starting..."

if [ -n "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" -gt 0 ]] ; then
  $wine "$(basename "$(realpath "$GAME_EXE")")" &>> "$log"
else
  $wine "$(basename "$(realpath "$GAME_EXE")")"
fi


msg "Waiting all wine processes terminate..."
wineserver --wait

if [ -n "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" -gt 0 ]] ; then
  msg "Debug log available here '$log'"
fi

exit 0
