#!/usr/bin/env bash

_where="$(dirname $(which $0))"
source "$_where"/customization.cfg 2> /dev/null
_return=$?


msg()
{
  echo -e "[+] info:: lunion-play: $1" >&2
}

error()
{
  echo -e "[-] error:: lunion-play: $1" >&2
}

_pfx_update()
{
  export WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
  export WINEDEBUG=-all

  msg "Preparing to launch the game..."
  wineboot
  wineserver -w

  unset WINEDLLOVERRIDES
  unset WINEDEBUG
}


# ==============
#  Verification
# ==============

if [[ "$1" =~ -h ]] || [[ "$1" =~ --help ]] || [ "$#" -ne 2 ]; then
  echo "usage: lunion-play gamename /path/to/game.exe"
  exit 1
fi

if [[ "$1" =~ ^\/$|(\/[a-zA-Z_0-9-]+)+$ ]]; then
  error "Don't pass a path: $1"
  exit 1
fi

if [[ ! "$2" =~ ^\/$|(\/[a-zA-Z_0-9 -]+)+.exe$ ]]; then
  error "Need to pass a Windows game (/path/to/game.exe)"
  exit 1
fi

GAMEEXE="$(basename "$2")"
if [ ! -f "$GAMEEXE" ]; then
  error "The game executable doesn't exist"
  exit 1
fi


# ========================================
#  Lunion Play configuration Verification
# ========================================

if [ "$_return" = 1 ]; then
  msg "customization.cfg not found"
  if [ -z "$GAMEDIR" ]; then
    msg "Set the variable \`GAMEDIR=/home/frog\`"
    exit 1
  fi
  if [ -z "$CUSTOM_WINE" ]; then
    msg "Set the variable \`CUSTOM_WINE=/path/to/wine/bin\`"
    exit 1
  fi
fi
if [ ! -z "$GAMEDIR" ]; then
  GAMEDIR="$GAMEDIR/$1"
elif [ ! -z "$_games_path" ]; then
  GAMEDIR="$_games_path/$1"
else
  exit 1
fi
msg "$GAMEDIR"


# ====================
#  Wine Configuration
# ====================

if [ -z "$CUSTOM_WINE" ] && [ ! -z "$_custom_wine" ]; then
  CUSTOM_WINE="$_custom_wine"
fi
if [ ! -z "$CUSTOM_WINE" ]; then
  if [ -z "$PATH" ]; then
    PATH="$CUSTOM_WINE"
  else
    PATH="$CUSTOM_WINE:$PATH"
  fi

  if [ -z "$LD_LIBRARY_PATH" ]; then
    LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib"
  else
    LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib:$LD_LIBRARY_PATH"
  fi
fi
msg "$(wine --version)"

if [ -z "$LUNION_PLAY_SYNC" ]; then
  LUNION_PLAY_SYNC=futex2
fi

case "$LUNION_PLAY_SYNC" in
  esync)
    export WINEESYNC=1
    msg "esync will be used"
    ;;
  fsync)
    export WINEFSYNC_FUTEX2=0
    export WINEFSYNC=1
    msg "fsync will be used"
    ;;
  futex2)
    export WINEFSYNC=1
    msg "futex2 will be used"
    ;;
  nofastsync)
    export WINE_DISABLE_FAST_SYNC=1
    msg "wineserver will be used"
    ;;
  fastsync)
    msg "fastsync will be used"
    ;;
  disable)
    export WINEESYNC=0
    export WINEFSYNC=0
    export WINE_DISABLE_FAST_SYNC=1
    ;;
  *)
    export WINEESYNC=0
    export WINEFSYNC=0
    export WINE_DISABLE_FAST_SYNC=1
    error "$LUNION_PLAY_SYNC is not reconnized"
    ;;
esac

read -p "Press enter to continue. "


# ====================
#  Wine prefix Update
# ====================

export WINEPREFIX="$GAMEDIR/pfx"
_pfx_update


# ========================
#  Wine log Configuration
# ========================

export WINEDLLOVERRIDES="winemenubuilder.exe="
if [ -z "$WINEDEBUG" ]; then
  export WINEDEBUG=-all

  if [[ "$LUNION_PLAY_LOG" =~ err ]]; then
    export WINEDEBUG=fixme-all
  elif [[ "$LUNION_PLAY_LOG" =~ all ]]; then
    unset WINEDEBUG
  fi
fi


# ====================
#  DXVK Configuration
# ====================

#export DXVK_HUD=devinfo,fps,version,api
#export DXVK_HUD=full
export DXVK_LOG_LEVEL=none


# ============================
#  VKD3D-Proton Configuration
# ============================

export VKD3D_DEBUG=none
#export VKD3D_CONFIG=dxr,force_static_cbv

# Nvidia
export __GL_SHADER_DISK_CACHE=1
export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
export __GL_SHADER_DISK_CACHE_PATH="$GAMEDIR/shaders"

# MangoHUD
export MANGOHUD_CONFIGFILE=$HOME/Games/mangohud.config


# =============
#  Game Launch
# =============

msg "Starting..."

cd $(dirname "$(which "$2")")
wine "$GAMEEXE"

msg "Waiting all wine processes terminate"
wineserver --wait

exit 0
