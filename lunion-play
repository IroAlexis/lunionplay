#!/usr/bin/env bash

if [ "$DEBUG" = 1 ]; then
  set -x
fi

where="$(dirname "$(which "$0")")"

if [ "$#" -ne 2 ]; then
  echo "usage: lunion-play gamename /path/to/game.exe"
  echo ""
  exit 1
fi

if [[ "$1" =~ -h ]] || [[ "$1" =~ --help ]]; then
  echo "usage: lunion-play gamename /path/to/game.exe"
  exit 1
fi


msg()
{
  echo -e "[+] info:: lunion-play: $1" >&2
}

error()
{
  echo -e "[-] error:: lunion-play: $1" >&2
}

is_futex2_supported()
{
  if [ -d /sys/kernel/futex2 ]; then
    if [ -f /sys/kernel/futex2/wait ] && [ -f /sys/kernel/futex2/waitv ] && [ -f /sys/kernel/futex2/wake ]; then
      msg "kernel: futex2 is supported"
      return 0
    fi
  fi

  msg "kernel: futex2 is not supported"
  return 1
}

is_winesync_supported()
{
  if [ -e /dev/winesync ]; then
    msg "kernel: fastsync is supported"
    return 0
  fi

  msg "kernel: fastsync is not supported"
  return 1
}

update_winepfx()
{
  if [ -z "$WINEDLLOVERRIDES" ]; then
    export WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
  else
    OLD=$WINEDLLOVERRIDES
    WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
  fi

  if [ -d $WINEPREFIX ]; then
    msg "Preparing to launch the game..."
  else
    msg "Prefix not found. $WINEPREFIX"
    msg "Creating the wine prefix..."
  fi

  wineboot &> /dev/null | ret=$?
  wineserver -w

  WINEDLLOVERRIDES="$OLD"
  unset OLD

  return $ret
}

display_runtime_options()
{
  if [ ! -z "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" > 0 ]] ; then
    echo "==========================================="
    msg "version: $(wine --version)"
    msg "command: $1"
  fi

  type="runtime_option:"
  msg "$type PATH=$PATH"
  msg "$type LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

  ENV_WINE=$(env | grep -e "WINE\|DXVK\|VKD3D")
  for var in $ENV_WINE; do
    msg "$type $var"
  done

  if [ ! -z "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" > 0 ]] ; then
    echo "==========================================="
  fi
}


# ========================================
#  Lunion Play configuration Verification
# ========================================

command -v source 1> /dev/null
if [ ! $? ]; then
  msg "Need install the tcl package"
  exit 1
fi

if [[ "$where" =~ ^\/+usr\/+bin\/*.* ]] && [ -f "$HOME/.config/lunion-play/customization.cfg" ]; then
  source "$HOME"/.config/lunion-play/customization.cfg 2> /dev/null
  msg "cfg_loader: $HOME/.config/lunion-play/customization.cfg"
elif [[ "$where" != ^\/+usr\/+bin\/*.* ]] && [ -f "$where/customization.cfg" ]; then
  source "$where"/customization.cfg 2> /dev/null
  msg "cfg_loader: $where/customization.cfg"
elif [[ "$where" =~ ^\/+usr\/+bin\/*.* ]] && [ -f "/etc/lunion-play/customization.cfg" ]; then
  source /etc/lunion-play/customization.cfg 2> /dev/null
  msg "cfg_loader: /etc/lunion-play/customization.cfg"
else
  msg "cfg_loader: customization.cfg not found"
  if [ -z "$GAMES_PATH" ]; then
    msg "Set the variable 'GAMES_PATH=/home/frog'"
  fi
  exit 1
fi

if [ ! -z "$GAMES_PATH" ]; then
  GAMEDIR="$GAMES_PATH/$1"
elif [ ! -z "$_games_path" ]; then
  GAMEDIR="$_games_path/$1"
else
  exit 1
fi
msg "game_directory: $GAMEDIR"


# ========================
#  Arguments Verification
# ========================

if [[ "$1" =~ ^\/$|(\/[a-zA-Z_0-9-]+)+$ ]]; then
  error "Do not pass a path: $1"
  exit 1
fi

if [[ ! "$2" =~ ^\/$|(\/[a-zA-Z_0-9 -.]+)+.exe$ ]]; then
  error "Need to pass a Windows game (/path/to/game.exe)"
  exit 1
fi

if [ -f "$2" ]; then
  GAMEEXE="$(basename "$(realpath "$2")")"
else
  error "The game executable does not exist"
  exit 1
fi
msg "command: $2"


# =======================
#  Runtime Configuration
# =======================

if [ -z "$CUSTOM_WINE" ] && [ ! -z "$_custom_wine" ]; then
  CUSTOM_WINE="$_custom_wine"
fi
if [ ! -z "$CUSTOM_WINE" ]; then
  if [ -z "$PATH" ]; then
    PATH="$CUSTOM_WINE"
  else
    PATH="$CUSTOM_WINE:$PATH"
  fi

  if [ -z "$LD_LIBRARY_PATH" ]; then
    LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib"
  else
    LD_LIBRARY_PATH="$CUSTOM_WINE/../lib64:$CUSTOM_WINE/../lib32:$CUSTOM_WINE/../lib:$LD_LIBRARY_PATH"
  fi
fi
msg "version: $(wine --version)"

export WINEPREFIX="$GAMEDIR"/pfx

is_futex2_supported
is_winesync_supported

if [ -z "$LUNION_PLAY_SYNC" ]; then
  export WINEESYNC=1
  export WINEFSYNC=1
else
  case "$LUNION_PLAY_SYNC" in
    esync)
      export WINEESYNC=1
      ;;

    fsync)
      export WINEFSYNC_FUTEX2=0
      export WINEFSYNC=1
      ;;

    futex2)
      export WINEFSYNC=1
      ;;

    fastsync)
      unset WINEESYNC
      unset WINEFSYNC
      ;;

    none)
      unset WINEESYNC
      unset WINEFSYNC
      export WINE_DISABLE_FAST_SYNC=1
      msg "wineserver will be used"
      ;;

    *)
      error "LUNION_PLAY_SYNC=$LUNION_PLAY_SYNC is a unknown value"
      exit 1
      ;;
  esac
fi

if [ "$LUNION_PLAY_LOG" = 1 ]; then
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=warn+seh
  fi
elif [ "$LUNION_PLAY_LOG" = 2 ]; then
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=+timestamp,+pid,+tid,+seh,+debugstr,+loaddll,+mscoree
  fi
else
  if [ -z "$WINEDEBUG" ]; then
    export WINEDEBUG=-all
  fi
fi

if [[ ! "$_no_confirm" =~ true ]]; then
  read -p "Press enter to continue. "
fi


# ====================
#  Wine prefix Update
# ====================

update_winepfx

if [ "$?" = 1 ]; then
  error "Problem Wine prefix update"
  exit 1
fi

if [ -z "$WINEDLLOVERRIDES" ]; then
  export WINEDLLOVERRIDES="winemenubuilder.exe="
fi


# ====================
#  DXVK Configuration
# ====================

if [[ "$LUNION_PLAY_LOG" > 0 ]]; then
  export DXVK_LOG_LEVEL=info
else
  export DXVK_LOG_LEVEL=none
fi


# ============================
#  VKD3D-Proton Configuration
# ============================

if [[ "$LUNION_PLAY_LOG" > 0 ]]; then
  export VKD3D_DEBUG=warn
else
  export VKD3D_DEBUG=none
fi

if [ ! -z "$_ray_tracing" ] && [[ "$_ray_tracing" =~ true ]]; then
  if [ -z "$VKD3D_CONFIG" ]; then
    export VKD3D_CONFIG=dxr
  else
    VKD3D_CONFIG+=,dxr
  fi
fi


# ======================
#  Driver Configuration
# ======================

export $(cat /sys/class/drm/card0/device/uevent | grep -e "nvidia")
if [[ "$DRIVER" = nvidia ]] && [ -d /proc/driver/nvidia ]; then
  export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
  export __GL_SHADER_DISK_CACHE=1
  export __GL_SHADER_DISK_CACHE_PATH="$GAMEDIR/shaders"
fi


# =============
#  Game Launch
# =============

if [ ! -z "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" > 0 ]] ; then
  log=$HOME/lunionplay-$1.log
  display_runtime_options "$2" &> $log
else
  display_runtime_options "$2"
fi
msg "Starting..."

cd "$(dirname "$(realpath "$2")")"
if [ ! -z "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" > 0 ]] ; then
  wine "$GAMEEXE" &>> $log
else
  wine "$GAMEEXE"
fi


msg "Waiting all wine processes terminate..."
wineserver --wait

if [ ! -z "$LUNION_PLAY_LOG" ] && [[ "$LUNION_PLAY_LOG" > 0 ]] ; then
  msg "Debug log available here $log"
fi

exit 0
